ShiftCipher-4 MONOCIPHER:43 OTPCIPHER:127 HASH:228 MAC:200 DIGITALSIGNATURE:357 RSA:299 DIFFIEHELLMAN:256 AES:385

1)sHIFT cIPHER

import java.io.*;
import java.util.*;
class CeaserCipher
{
	public static StringBuffer encrypt(String text, int s)
	{
		StringBuffer result= new StringBuffer();
		for(int i=0;i<text.length();i++)
		{
			if(Character.isUpperCase(text.charAt(i)))
			{
			char ch=(char)(((int)text.charAt(i)+s-65)%26+65);
			result.append(ch);
			}         
			else
			{
			char ch=(char)(((int)text.charAt(i)+s-97)%26+97);
			result.append(ch);
			}
		}
	return result;
	}
public static void main(String[] args)
{
	System.out.println("Enter Text:");
	Scanner sc =new Scanner(System.in);
	String text=sc.nextLine();
	System.out.print("Enter shift:");
	int s=sc.nextInt();
	System.out.print("Cipher:"+encrypt(text,s));
	
}
}



2)MONO CIPHER

import java.util.*;
class MonoCipher
{

static String encoder(char[] key)
{
String encoded="";
boolean[] arr=new boolean[26];
for (int i=0; i<key.length; i++)
{
if (arr[key[i]-65]==false)
{
    encoded+=(char)key[i];
    arr[key<26; i++)
{
if (arr[i]==false)
{

    arr[i]=true;
    encoded+=(char)(i+65);
}

}
return encoded;
}
static String ciphertext(String msg,String encoded)
{
String cipher="";

for (int i=0; i<msg.length(); i++)
{
if (msg.charAt(i)>='A' && msg.charAt(i)<='Z')
{
    int pos=msg.charAt(i)-65;
    cipher+=encoded.charAt(pos);
}
else
{
   cipher+=msg.charAt(i);
}

}
return cipher;
}
public static void main(String[] args)
{
Scanner sc= new Scanner(System.in);
System.out.println("Enter Key: ");
String key=sc.nextLine();
String encoded=encoder(key.toCharArray());
System.out.println("Enter Message:");
String message=sc.nextLine();
System.out.println("Message before Ciphering:" + message);
System.out.println("Ciphered text: " + ciphertext(message,encoded));
}
}




3.OTPCipher
import java.util.*;

public class OTPCipher
{
  public static void main(String args[])
  {
Scanner sc=new Scanner(System.in);
System.out.println("Enter text to encrypt: ");
String text=sc.nextLine();
String key=RandomAlpha(text.length());
String enc=OTPEncryption(text,key);
String dec=OTPDecryption(enc,key.toUpperCase());
System.out.println("Plain text: "+text);
System.out.println("Cipher text: "+enc);
System.out.println("After decrypotion Plain text: "+dec);
  }
  public static String RandomAlpha(int len)
  {
Random r = new Random();
String key="";
for(int x=0;x<len;x++)
  key=key + (char)(r.nextInt(26)+'A');
System.out.println("Key is: "+key);
  return key;
  }
  public static String OTPEncryption(String text,String key)
  {
String alphaU ="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int len=text.length();
String sb="";
for(int x=0;x<len;x++)
{
char get=text.charAt(x);
char keyget=key.charAt(x);
if(Character.isUpperCase(get))
{
int index=alphaU.indexOf(get);
int keydex=alphaU.indexOf(Character.toUpperCase(keyget));
int total=(index+keydex)%26;
sb=sb+alphaU.charAt(total);
}
else
{
sb=sb+get;
}
}
return sb;
  }
public static String OTPDecryption(String text,String key)
{
String plainText = "";
int plain[] = new int[key.length()];
for (int i = 0; i < key.length(); i++)
{
  plain[i]= text.charAt(i) - 'A' - (key.charAt(i) - 'A');
}
for (int i = 0; i < key.length(); i++)
{
  if (plain[i] < 0)
  {
      plain[i] = plain[i] + 26;
  }
}
for (int i = 0; i < key.length(); i++)
{
  int x = plain[i] + 'A';
  plainText += (char)x;
}
return plainText;

  }
}


4.MAC SAMPLE
import java.security.Key;
import java.security.SecureRandom;

import javax.crypto.KeyGenerator;
import javax.crypto.Mac;

public class MacSample{
public static void main(String args[]) throws Exception{
	 KeyGenerator keyGen = KeyGenerator.getInstance("DES");
	SecureRandom secRandom = new SecureRandom();
	keyGen.init(secRandom);
	Key key = keyGen.generateKey();
	Mac mac = Mac.getInstance("HmacSHA256");
      mac.init(key);
      String msg = new String("am i good at cns");
      byte[] bytes = msg.getBytes();      
      byte[] macResult = mac.doFinal(bytes);	 
	System.out.println("Mac result:");
      System.out.println(new String(macResult));  

}
}



5.HASH FUNCTION

import java.math.BigInteger;
import java.util.*;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
class Main{
public static void main(String[]args) throws Exception
{

Scanner sc=new Scanner(System.in);
String a=sc.nextLine();
System.out.println("HashCode Generated by SHA-256 for.");
System.out.println(a);
MessageDigest md=MessageDigest.getInstance("SHA-256");
byte[] b=md.digest(a.getBytes());
BigInteger number=new BigInteger(1,b);
StringBuilder sb=new StringBuilder(number.toString(16));
while(sb.length()<32)
{
sb.insert(0,'0');
}
System.out.println(sb.toString());
}
}


6)DIFFE-HELLMAN

import java.io.*;
import java.util.*;
class GFG
{
private static long power(long a,long b,long p)
{
  if(b==1)
     return a;
  else
     return(((long)Math.pow(a,b))%p);

}
public static void main(String args[])
{
long P,G,x,a,y,b,ka,kb;
Scanner s =new Scanner(System.in);
System.out.println("Enter the value of P:");
P=s.nextInt();
//P=23;
System.out.println("The value of P:"+P);
System.out.println("Enter the valueof G:");
G=s.nextInt();
//G=9;
System.out.println("The valueof G:"+G);
System.out.println("Enter the valueof a:");
a=s.nextInt();
System.out.println("The private key a for Alice:"+a);
x=power(G,a,P);
System.out.println("Enter the value of b:");
b=s.nextInt();
System.out.println("The private key b for Bob:"+b);
y=power(G,b,P);
ka=power(y,a,P);
kb=power(x,b,P);
System.out.println("Secret key for the Alice is:"+ka);
System.out.println("Secret key for the Bob is:"+kb);
}
}



7)RSA

import java.math.*;
import java.util.*;
class RSA
{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
int p,q,n,z,d=0,e,i;
System.out.println("Enter the number to be encrypted and decrypted");
int msg=sc.nextInt();
double c;
BigInteger msgback;
System.out.println("Enter 1st prime number p");
p=sc.nextInt();
System.out.println("Enter 2nd prime number q");
q=sc.nextInt();
n=p*q;
z=(p-1)*(q-1);
System.out.println("the value of z="+z);
for(e=2;e<z;e++)
{
if(gcd(e,z)==1)
{
break;
}
}
System.out.println("the value of e="+e);
for(i=0;i<=9;i++)
{
int x=1+(i*z);
if(x%e==0)
{
d=x/e;
break;
}
}
System.out.println("the value of d="+d);
c=(Math.pow(msg,e))%n;
System.out.println("Encrypted message is:-");
System.out.println(c);
BigInteger N=BigInteger.valueOf(n);
BigInteger C=BigDecimal.valueOf(c).toBigInteger();
msgback=(C.pow(d)).mod(N);
System.out.println("Decrypted message is :-");
System.out.println(msgback);
}
static int gcd(int e,int z)
{
if(e==0)
return z;
else
return gcd(z%e,e);
}
}


8)DIGITAL SIGNATURE

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.Signature;
import java.util.Scanner;
public class CreatingDigitalSignature {
   public static void main(String args[]) throws Exception {
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter some text");
      String msg = sc.nextLine();
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
      keyPairGen.initialize(2048);
      KeyPair pair = keyPairGen.generateKeyPair();
      PrivateKey privKey = pair.getPrivate();
      Signature sign = Signature.getInstance("SHA256withDSA");
      sign.initSign(privKey);
      byte[] bytes = "msg".getBytes();
      sign.update(bytes);
      byte[] signature = sign.sign();
      System.out.println("digital signature for given text: "+new String(signature, "UTF8"));
   }
}




10)AES

import java.security.*;
import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
public class Main{
 
    private static SecretKeySpec secretKey;
    private static byte[] key;
 
    public static void setKey(String myKey)throws Exception
    {
            key = myKey.getBytes("UTF-8");
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16); 
            secretKey = new SecretKeySpec(key, "AES");
    }
 
    public static String encrypt(String msg, String secret) throws Exception
    {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(msg.getBytes()));
    }
 
    public static String decrypt(String msg, String secret)throws Exception
    {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(msg)));
    }

public static void main(String[] args)throws Exception
{
    Scanner sc=new Scanner(System.in);
    String secret=sc.nextLine();
    String originalString = sc.nextLine();
    String encryptedString = encrypt(originalString, secret) ;
    String decryptedString = decrypt(encryptedString, secret) ;
    System.out.println(originalString);
    System.out.println(encryptedString);
    System.out.println(decryptedString);
}
}

